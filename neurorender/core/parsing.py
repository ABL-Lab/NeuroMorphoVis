####################################################################################################
# Copyright (c) 2016 - 2018, EPFL / Blue Brain Project
#               Marwan Abdellah <marwan.abdellah@epfl.ch>
#
# This file is part of NeuroMorphoVis <https://github.com/BlueBrain/NeuroMorphoVis>
#
# This library is free software; you can redistribute it and/or modify it under the terms of the
# GNU Lesser General Public License version 3.0 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License along with this library;
# if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301 USA.
####################################################################################################

__author__      = "Marwan Abdellah"
__copyright__   = "Copyright (c) 2016 - 2018, Blue Brain Project / EPFL"
__credits__     = ["Ahmet Bilgili", "Juan Hernando", "Stefan Eilemann"]
__version__     = "1.0.0"
__maintainer__  = "Marwan Abdellah"
__email__       = "marwan.abdellah@epfl.ch"
__status__      = "Production"


# System imports
import argparse

# Blender imports
import neuron


####################################################################################################
# @parse_command_line_arguments
####################################################################################################
def parse_command_line_arguments(arguments=None):
    """Parses the input arguments.

    :param arguments:
        Command line arguments.
    :return:
        Arguments list.
    """

    # add all the options
    description = 'NeuroRender: a simple tool for rendering neurons generated by NeuroMorphoVis'
    parser = argparse.ArgumentParser(description=description)

    arg_help = 'Rendering configuration file'
    parser.add_argument('--config',
                        action='store', dest='config', help=arg_help)

    arg_help = 'Input directory, where the meshes are stored'
    parser.add_argument('--input',
                        action='store', dest='input', help=arg_help)

    arg_help = 'Base image resolution'
    parser.add_argument('--resolution',
                        action='store', default=512, dest='resolution', help=arg_help)

    arg_help = 'Number of samples per pixel SPP'
    parser.add_argument('--spp',
                        action='store', default=32, dest='num_samples', help=arg_help)

    arg_help = 'Output directory, where the final image and scene will be stored'
    parser.add_argument('--output',
                        action='store', dest='output', help=arg_help)

    arg_help = 'Image and scene prefix'
    parser.add_argument('--prefix',
                        action='store', default='image', dest='image_prefix', help=arg_help)

    # Parse the arguments
    return parser.parse_args()


####################################################################################################
# @parse_rendering_configuration
####################################################################################################
def parse_rendering_configuration(configuration_file):
    """Parse a rendering configuration file.

    :param configuration_file:
        A given configuration file to load the neurons and rendering the scene.
    :return:
        A list of neurons.
    """

    # File contents
    config_data = list()

    # Read the configuration file
    config_file_handle = open(configuration_file, 'r')
    for line in config_file_handle:
        config_data.append(line)
    config_file_handle.close()

    # Parse the configuration
    index = 0
    while True:




        break




    # A list of all the parsed neurons
    neurons = list()



    neuron_item = neuron.Neuron()


    return neurons